<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <node name="Программирование с использованием SPL для K1986BE92" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1622146768" ts_lastsave="1623335486">
    <rich_text>1. </rich_text>
    <rich_text link="node 2">Работа с портами.</rich_text>
    <rich_text>
2. </rich_text>
    <rich_text link="node 3">Работа с UART</rich_text>
    <node name="Работа с портами" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1622148044" ts_lastsave="1623335176">
      <rich_text justification="fill" scale="h2">	Для удобства настройки портов ввода-вывода используем специальную структуру типа </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_InitTypeDef</rich_text>
      <rich_text justification="fill" scale="h2">. Вот пример ее описания: </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">PORT_InitTypeDef GPIOInitStruct;</rich_text>
      <rich_text justification="fill" scale="h2"> 
Тип </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_InitTypeDef</rich_text>
      <rich_text justification="fill" scale="h2"> описан в заголовке MDR32F9Qx_port.h.
	Перед использованием структуры для конфигурации очередного набора линий ввода-вывода инициализируем ее следующим образом:  </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">PORT_StructInit(&amp;GPIOInitStruct);</rich_text>
      <rich_text justification="fill" scale="h2">
Чтобы упростить работу с пинами, в модуле MDR32F9Qx_port.h предусмотрен ряд констант, описывающих соответствующие линии:</rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="fill" scale="h2">	Применяя к этим константам операцию поразрядного ИЛИ (символ | ), можно легко и понятно указывать требуемый для конфигурации набор линий. Например, если требуется сконфигурировать линии 2, 3 и 5,
следует написать: 
</rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">GPIOInitStruct.PORT_Pin = PORT_Pin_2 | PORT_Pin_3 | PORT_Pin_5;</rich_text>
      <rich_text justification="fill" scale="h2"> Если требуется сконфигурировать только линию 4, то это выглядит так: </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">GPIOInitStruct.PORT_Pin = PORT_Pin_4;</rich_text>
      <rich_text justification="fill" scale="h2"> 
Константа </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_Pin_All</rich_text>
      <rich_text justification="fill" scale="h2"> описывает сразу все 16 линий.
В поле </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_MODE</rich_text>
      <rich_text justification="fill" scale="h2"> типа </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_MODE_TypeDef</rich_text>
      <rich_text justification="fill" scale="h2"> указывают режим работы выбранных пинов. Здесь возможны два варианта значений:
- PORT_MODE_ANALOG – линия является аналоговой;
- PORT_MODE_DIGITAL – линия является цифровой.
Режим аналоговой линии выбирается, если требуется работать с АЦП, ЦАП, аналоговым компаратором или внешним низкочастотным кварцевым резонатором. В остальных случаях используется режим цифровой
линии.
Для указания линии порта в каком состоянии она будет (вход или выход) используется поле </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_OE</rich_text>
      <rich_text justification="fill" scale="h2">.
Пример для выхода: </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">GPIOInitStruct.PORT_OE = PORT_OE_OUT;</rich_text>
      <rich_text justification="fill" scale="h2"> соответственно для входа </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">GPIOInitStruct.PORT_OE = PORT_OE_IN;</rich_text>
      <rich_text justification="fill" scale="h2">
	В поле </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_SPEED</rich_text>
      <rich_text justification="fill" scale="h2"> указывают примерную скорость работы линии, т.е. какой частоты сигнал может через нее проходить. Возможны следующие значения:
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_OUTPUT_OFF</rich_text>
      <rich_text justification="fill" scale="h2"> – выход выключен;
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_SPEED_SLOW</rich_text>
      <rich_text justification="fill" scale="h2"> – низкая скорость (фронт порядка 100 нс, частота до 5 МГц);
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_SPEED_FAST</rich_text>
      <rich_text justification="fill" scale="h2"> – высокая скорость (фронт порядка 20 нс, частота до 25 МГц);
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_SPEED_MAXFAST</rich_text>
      <rich_text justification="fill" scale="h2"> – предельно высокая скорость (фронт порядка 10 нс, частота до 50 МГц).
Этот параметр влияет на форму фронтов формируемых импульсов. Если выбрать высокую скорость, то фронты будут крутыми, а если низкую – то пологими. Крутые фронты необходимы на высоких частотах, но они создают широкий спектр помех, что может неблагоприятно сказаться на работе
схемы. Пологие же фронты создают гораздо меньше помех, но на больших частотах неприменимы. Пример: </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">GPIOInitStruct.PORT_SPEED = PORT_SPEED_SLOW;</rich_text>
      <rich_text justification="fill" scale="h2">
	Поле </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PD</rich_text>
      <rich_text justification="fill" scale="h2"> задает тип цифрового выхода:
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PD_DRIVER</rich_text>
      <rich_text justification="fill" scale="h2"> – управляемый драйвер;
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PD_OPEN</rich_text>
      <rich_text justification="fill" scale="h2"> – открытый сток. Пример: </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">GPIOInitStruct.PORT_PD = PORT_PD_DRIVER;</rich_text>
      <rich_text justification="fill" scale="h2">
	В полях </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_UP</rich_text>
      <rich_text justification="fill" scale="h2"> и </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_DOWN</rich_text>
      <rich_text justification="fill" scale="h2"> задают конфигурацию резисторов подтяжки линии ввода-вывода к цепям питания микроконтроллера. </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_UP</rich_text>
      <rich_text justification="fill" scale="h2"> управляет резистором для подтяжки к
плюсу питания. Возможны следующие значения:
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_UP_OFF</rich_text>
      <rich_text justification="fill" scale="h2"> – резистор подтяжки не используется;
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_UP_ON</rich_text>
      <rich_text justification="fill" scale="h2"> – резистор подтяжки используется.
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_DOWN</rich_text>
      <rich_text justification="fill" scale="h2"> управляет резистором для подтяжки к земле. Возможны следующие значения:
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_DOWN_OFF</rich_text>
      <rich_text justification="fill" scale="h2"> – резистор подтяжки не используется;
- </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_PULL_DOWN_ON</rich_text>
      <rich_text justification="fill" scale="h2"> – резистор подтяжки используется.
	Когда поля структуры заполнены, вводим в действие требуемую конфигурацию </rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">PORT_Init (MDR_PORTC, &amp;GPIOInitStruct);</rich_text>
      <rich_text justification="fill" scale="h2"> Первым параметром указывают название порта, для которого производится
конфигурация. Предопределенные названия находятся в заголовке MDR32F9Qx_port.h:
MDR_PORTA, MDR_PORTB, MDR_PORTC, MDR_PORTD, MDR_PORTE и MDR_PORTF. Если требуется сконфигурировать пины из нескольких портов, то и функция </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">PORT_Init </rich_text>
      <rich_text justification="fill" scale="h2">должна вызываться несколько раз:
отдельно для каждого порта.Также для нормальной работы портов необходимо разрешить их тактирование. Это делается путем вызова специальной функции </rich_text>
      <rich_text justification="fill" scale="h2" weight="heavy">RST_CLK_PCLKcmd</rich_text>
      <rich_text justification="fill" scale="h2"> из библиотечного модуля
MDR32F9Qx_rst_clk.c: 
</rich_text>
      <rich_text justification="fill" style="italic" scale="h2" weight="heavy">RST_CLK_PCLKcmd (RST_CLK_PCLK_PORTB | RST_CLK_PCLK_PORTB |RST_CLK_PCLK_PORTB | RST_CLK_PCLK_PORTB | RST_CLK_PCLK_PORTB | RST_CLK_PCLK_PORTB,ENABLE);</rich_text>
      <rich_text justification="fill">

</rich_text>
      <rich_text justification="fill" scale="h2">Пример программы мигание светодиодом на порту PB1:</rich_text>
      <rich_text>

</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2">Другой пример работы со светодиодами. К выводам 1 и 2 порта В подключены светодиоды (Red и Green), которые должны переключаться раз в секунду. Это можно сделать с
помощью прерываний при переполнении системного таймера SysTick.</rich_text>
      <rich_text>

</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <rich_text justification="center" scale="h1">	</rich_text>
      <rich_text justification="center" scale="h1" weight="heavy">Работа с цифровых входом.</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2">	Функция </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_ReadInputDataBit()</rich_text>
      <rich_text scale="h2"> читает состояние определенного входа. В следующем примере производится чтение состояния входа PD5.
</rich_text>
      <rich_text justification="left" scale="h2"></rich_text>
      <rich_text scale="h2">
	Функция </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_ReadInputData</rich_text>
      <rich_text scale="h2"> читает состояние всех входов указанного порта, возвращая 16-битное целое число (по количеству линий в порте):
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="center" scale="h1" weight="heavy">Работа с цифровым выходом</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2">	Цифровой выход PB1. Требуется выдать на этот выход значение логической единицы. Это можно сделать с помощью функции </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_SetBits</rich_text>
      <rich_text scale="h2">:</rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">	Первый параметр – название порта, второй – пины, которые нужно установить в единицу. Естественно, можно указать сразу несколько пинов: </rich_text>
      <rich_text style="italic" scale="h2" weight="heavy">PORT_SetBits (MDR_PORTB, PORT_Pin_0 | PORT_Pin_1 | PORT_Pin_2);</rich_text>
      <rich_text scale="h2"> Если среди указанных пинов попадется цифровой вход, то ничего страшного не произойдет: эта линия будет проигнорирована. Выходы в пределах выбранного порта, которые не указаны при вызове функции, не будут подвергаться какому-либо воздействию. Для установки на выходе значения логического нуля можно применить функцию </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_ResetBits</rich_text>
      <rich_text scale="h2">, например:</rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">Функция </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_WriteBit </rich_text>
      <rich_text scale="h2">позволяет установить выбранные выходы в указанное состояние (Bit_RESET – в 0; Bit_SET – в 1). В следующем примере в ноль будут установлены выходы PB0 и PB1, остальные же линии порта B никак не будут затронуты:</rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">Функция </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_Write</rich_text>
      <rich_text scale="h2"> позволяет просто записать в указанный порт (т.е. во всю совокупность его линий) требуемое значение, заданное 16-битным целым числом. В следующем примере линии PB0 и PB3 будут установлены в единицу, а остальные линии порта B – в ноль:
</rich_text>
      <rich_text justification="left" scale="h2"></rich_text>
      <rich_text scale="h2">
Таким образом, при вызове функции </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_Write</rich_text>
      <rich_text scale="h2"> воздействию подвергаются все выходы в пределах выбранного порта. Линии, не являющиеся выходами, естественно, не затрагиваются. Нередко требуется узнать, в каком состоянии сейчас находится тот или иной цифровой выход. Для этого можно применить функцию </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_ReadInputDataBit()</rich_text>
      <rich_text scale="h2"> и </rich_text>
      <rich_text scale="h2" weight="heavy">PORT_ReadInputData()</rich_text>
      <rich_text scale="h2">. Дело в том, что при их вызове в любом случае возвращается состояние линий ввода/вывода независимо от того, вход это или выход. В следующем примере в переменную flag считывается состояние выхода PB0:
</rich_text>
      <rich_text justification="left" scale="h2"></rich_text>
      <rich_text scale="h2">
Если выход установлен в 1, то и переменной flag присвоится значение 1. Если же выход установлен в 0, то и переменной flag присвоится значение 0.</rich_text>
      <rich_text>

</rich_text>
      <rich_text justification="center" scale="h1" weight="heavy">Работа с кнопками</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2">На рисунке кнопка подключена к выводу PD5. Пока кнопка не нажата, вывод PD5 через резистор притянут к +3,3 В, следовательно, на нем будет напряжение логической единицы (те же +3,3 В). Если кнопку нажать, вывод PD5 притянется к цепи питания 0 В, т.е. на PD5 будет напряжение логического нуля.</rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <codebox char_offset="495" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">#define PORT_Pin_0 0x0001
#define PORT_Pin_1 0x0002
#define PORT_Pin_2 0x0004
#define PORT_Pin_3 0x0008
#define PORT_Pin_4 0x0010
#define PORT_Pin_5 0x0020
#define PORT_Pin_6 0x0040
#define PORT_Pin_7 0x0080
#define PORT_Pin_8 0x0100
#define PORT_Pin_9 0x0200
#define PORT_Pin_10 0x0400
#define PORT_Pin_11 0x0800
#define PORT_Pin_12 0x1000
#define PORT_Pin_13 0x2000
#define PORT_Pin_14 0x4000
#define PORT_Pin_15 0x8000
#define PORT_Pin_All 0xFFFF</codebox>
      <codebox char_offset="3968" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">#include &lt;MDR32F9Qx_port.h&gt;
#include &lt;MDR32F9Qx_rst_clk.h&gt;

//      Определения
#define LED_PERIOD      1000000

#define LED_PORT_CLK    RST_CLK_PCLK_PORTB
#define LED_PORT        MDR_PORTB
#define LED_PORT_PIN    PORT_Pin_1

//  Прототип функции задержки, реализованной ниже
void Delay(int waitTicks);

//  Точка входа, отсюда начинается исполнение программы
int main()
{
  // Заводим структуру конфигурации вывода(-ов) порта GPIO
  PORT_InitTypeDef GPIOInitStruct;

  //  Включаем тактирование порта LED_PORT_CLK
  RST_CLK_PCLKcmd (LED_PORT_CLK, ENABLE);
	
  //  Инициализируем структуру конфигурации вывода(-ов) порта значениями по умолчанию
  PORT_StructInit(&amp;GPIOInitStruct);
  
  //  Изменяем значения по умолчанию на необходимые нам настройки
  GPIOInitStruct.PORT_Pin        = LED_PORT_PIN;
  GPIOInitStruct.PORT_OE         = PORT_OE_OUT;
  GPIOInitStruct.PORT_SPEED      = PORT_SPEED_SLOW;
  GPIOInitStruct.PORT_MODE       = PORT_MODE_DIGITAL;
  
  //  Применяем заполненную нами структуру для LED_PORT
  PORT_Init(LED_PORT, &amp;GPIOInitStruct);

  //  Запускаем бесконечный цикл обработки - Основной цикл	
  while (1)
  {
    // Считываем состояние вывода LED_PORT_PIN
    // Если на выводе логический "0", то выставляем вывод в логическую "1"
    if (PORT_ReadInputDataBit (LED_PORT, LED_PORT_PIN) == 0)
    {	
	PORT_SetBits(LED_PORT, LED_PORT_PIN);	// LED
    }	
    
    //  Задержка   
    Delay(LED_PERIOD);

    // Считываем состояние вывода LED_PORT_PIN
    // Если на выводе = "1", то выставляем "0"
    if (PORT_ReadInputDataBit (LED_PORT, LED_PORT_PIN) == 1)
    {
	PORT_ResetBits(LED_PORT, LED_PORT_PIN);
    };
    
    //  Задержка    
    Delay(LED_PERIOD);
  }      
}

//  Простейшая функция задержки
void Delay(int waitTicks)
{
  int i;
  for (i = 0; i &lt; waitTicks; i++)
  {
    __NOP();
  }	
}</codebox>
      <codebox char_offset="4199" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="c" highlight_brackets="1" show_line_numbers="0">#include "MDR32Fx.h"
#include "core_cm3.h"
#include "MDR32F9Qx_config.h"
#include "system_MDR32F9Qx.h"
#include "MDR32F9Qx_rst_clk.h"
#include "MDR32F9Qx_port.h"

static PORT_InitTypeDef PortInit;//объявление структуры PortInit
volatile uint32_t delay_dec = 0;// объявление переменной delay_dec

//Обработчик прерывания системного таймера
void SysTick_Handler (void)
{
if (delay_dec !=0) delay_dec--;//вычитать из delay_dec, пока не станет равен 0
}

//функцияв ременной задержки
void delay_ms (uint32_t delay_ms)
{
delay_dec = delay_ms;//присвоить delay_dec значение delay_ms
while (delay_dec) {}; // выполнять функцию пока delay_dec не станет равным 0
}

int main(){
RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTB, ENABLE); );//включить тактирование порта B
//Инициализация порта B
PortInit.PORT_OE = PORT_OE_OUT; // направление передачи данных = Выход
PortInit.PORT_FUNC = PORT_FUNC_PORT; // режим работы вывода порта = Порт
PortInit.PORT_MODE = PORT_MODE_DIGITAL; // режим работы вывода= цифровой
PortInit.PORT_SPEED = PORT_SPEED_SLOW; // скорость фронта вывода = медленная
PortInit.PORT_Pin = (PORT_Pin_All);// выбор для инициализации
PORT_Init(MDR_PORTB, &amp;PortInit); //инициализация порта B заданными параметрами
//Инициализация системного таймера
SysTick-&gt;LOAD |= (8000000/1000)-1; //значение задержки прерывания при тактовой частоте 8 МГц = 1мс
SysTick-&gt;CTRL |= SysTick_CTRL_CLKSOURCE_Pos; //источник тактирования HCLK
SysTick-&gt;CTRL |= SysTick_CTRL_COUNTFLAG_Pos;// при досчитывании до нуля таймер генерирует прерывание
SysTick-&gt;CTRL |= ~SysTick_CTRL_ENABLE_Pos;//включить работу таймера

while(1)
{
delay_ms(1000); //задержка 1 с
PORT_SetBits(MDR_PORTB, PORT_Pin_All); //включить светодиоды
delay_ms(1000);//задержка 1 с
PORT_ResetBits(MDR_PORTB, PORT_Pin_All); //выключить светодиоды
}
}</codebox>
      <codebox char_offset="4362" justification="left" frame_width="500" frame_height="60" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">uint8_t flag;
...
flag = PORT_ReadInputDataBit (MDR_PORTD, PORT_Pin_5);</codebox>
      <codebox char_offset="4502" justification="left" frame_width="500" frame_height="60" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">uint16_t in_data;
...
in_data = PORT_ReadInputData (MDR_PORTD);</codebox>
      <codebox char_offset="4662" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">PORT_SetBits (MDR_PORTB, PORT_Pin_1);</codebox>
      <codebox char_offset="5206" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">PORT_ResetBits (MDR_PORTB, PORT_Pin_1);</codebox>
      <codebox char_offset="5440" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">PORT_WriteBit (MDR_PORTB, PORT_Pin_0 | PORT_Pin_1, Bit_RESET);</codebox>
      <codebox char_offset="5695" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">PORT_Write (MDR_PORTB, 0x0009);</codebox>
      <codebox char_offset="6240" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">uint8_t flag;
...
flag = PORT_ReadInputDataBit (MDR_PORTB, PORT_Pin_0);</codebox>
      <encoded_png char_offset="6699" justification="left" link=""></encoded_png>
      <codebox char_offset="6702" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="c" highlight_brackets="1" show_line_numbers="0">#include &lt;MDR32F9Qx_port.h&gt;
#include &lt;MDR32F9Qx_rst_clk.h&gt;

#define LED1 PORT_Pin_1 //определить вывод как LED1
static PORT_InitTypeDef PortInit; //объявление структуры PortInit

int main()
	{
		RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTD, ENABLE);//включить тактирование порта D
		RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTB, ENABLE); //включить тактирование порта B
		//Инициализация порта D для кнопки
		PortInit.PORT_OE = PORT_OE_IN; // направление передачи данных = вход
		PortInit.PORT_FUNC = PORT_FUNC_PORT; // режим работы вывода порта = Порт
		PortInit.PORT_MODE = PORT_MODE_DIGITAL; // режим работы выводе = цифровой
		PortInit.PORT_SPEED = PORT_SPEED_SLOW; // скорость фронта вывода = медленный
		PortInit.PORT_Pin = (PORT_Pin_5); // выбор вывода 5 для инициализации
		PORT_Init(MDR_PORTD, &amp;PortInit); //инициализация порта С заданными параметрами
		//Инициализация порта B для светодиода
		PortInit.PORT_OE = PORT_OE_OUT; // направление передачи данных = Выход
		PortInit.PORT_FUNC = PORT_FUNC_PORT; // режим работы вывода порта = Порт
		PortInit.PORT_MODE = PORT_MODE_DIGITAL; // режим работы вывода 	= Цифровой
		PortInit.PORT_SPEED = PORT_SPEED_SLOW; // скорость фронта вывода = медленный
		PortInit.PORT_Pin = (PORT_Pin_All);// выбор всех выводов для инициализации
		PORT_Init(MDR_PORTB, &amp;PortInit); //инициализация порта B заданными параметрами
		PORT_SetBits(MDR_PORTB, PORT_Pin_All); // включить все светодиоды при старте

	while(1)
		{ 
		if (PORT_ReadInputDataBit(MDR_PORTD,PORT_Pin_5) == 0)
//если кнопка не нажата…
		{
			PORT_SetBits(MDR_PORTB, LED1); // включить светодиод на выводе 1 порта B
		}
		else
		{
			PORT_ResetBits(MDR_PORTB, LED1); // выключить светодиод на выводе 1 порта B
		}
		}
	}</codebox>
    </node>
    <node name="Работа с UART" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1623335435" ts_lastsave="1623336580">
      <rich_text scale="h2" weight="heavy">Передача символа на ПК каждые 5 секунд</rich_text>
      <rich_text>.
</rich_text>
      <rich_text scale="h2">Вывод 1 порта F назначен в качестве линии передачи TXD приемопередатчика UART, а вывод 0 того же порта – в качестве линии приема RXD. При старте микроконтроллер начинает отсылать по
последовательному интерфейсу на вход приемопередатчика UART цифровое значение переменной iкаждые 5 секунды. Значение переменной i после каждой отправки увеличивается на 1.</rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>

</rich_text>
      <codebox char_offset="394" justification="left" frame_width="500" frame_height="40" width_in_pixels="1" syntax_highlighting="c" highlight_brackets="1" show_line_numbers="0">#include "MDR32F9Qx_uart.h"
#include "MDR32F9Qx_port.h"
#include "MDR32F9Qx_rst_clk.h"

static PORT_InitTypeDef PortInit;//объявление структуры PortInit
static UART_InitTypeDef UART_InitStructure;//объявление структуры UART_InitStructure
volatile uint32_t delay_dec = 0;// объявление переменной delay_dec

//Обработчик прерывания системного таймера
void SysTick_Handler (void)
{
  if (delay_dec !=0) delay_dec--;
}
//функция временной задержки
void delay_ms (uint32_t delay_ms)
{
  delay_dec = delay_ms;
  while (delay_dec) {};
}

int main (void)
{
  uint8_t i = 0;//объявление переменной счетчика, хранящей передаваемое по UARTзначение
  //Инициализация системного таймера для функции задержки (см. 4.2)
  SysTick-&gt;LOAD |= (8000000/1000)-1;
  SysTick-&gt;CTRL |= SysTick_CTRL_CLKSOURCE_Pos;
  SysTick-&gt;CTRL |= SysTick_CTRL_COUNTFLAG_Pos;
  SysTick-&gt;CTRL |= ~SysTick_CTRL_ENABLE_Pos;
  RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTF,ENABLE); //включить тактирование порта F

  //Инициализация порта F для функции UART
  PortInit.PORT_PULL_UP = PORT_PULL_UP_OFF;//подтяжка в питание выключена
  PortInit.PORT_PULL_DOWN = PORT_PULL_DOWN_OFF;//подтяжка в ноль выключена
  PortInit.PORT_PD_SHM = PORT_PD_SHM_OFF;//режим триггера Шмитта выключен
  PortInit.PORT_PD = PORT_PD_DRIVER;//режим управляемого драйвера
  PortInit.PORT_GFEN = PORT_GFEN_OFF;//входной фильтр выключен
  PortInit.PORT_FUNC = PORT_FUNC_ALTER;//альтернативная функция порта
  PortInit.PORT_SPEED = PORT_SPEED_MAXFAST;//скорость фронта вывода = быстрая
  PortInit.PORT_MODE = PORT_MODE_DIGITAL; //режим работы вывода = цифровой
  //Инициализация вывода 1 как UART_TX
  PortInit.PORT_Pin = PORT_Pin_1;
  PORT_Init(MDR_PORTF, &amp;PortInit);
  //Инициализация вывода 0 как UART_RX
  PortInit.PORT_OE = PORT_OE_IN;
  PortInit.PORT_Pin = PORT_Pin_0;
  PORT_Init(MDR_PORTF, &amp;PortInit);
  RST_CLK_CPU_PLLconfig (RST_CLK_CPU_PLLsrcHSIdiv2,0);//конфигурация источника тактирования HSI делением частоты на 2 и без умножения
  RST_CLK_PCLKcmd(RST_CLK_PCLK_UART1, ENABLE); //включить тактирование UART
  UART_BRGInit(MDR_UART1, UART_HCLKdiv1);//делитель тактовой частоты UART = 1
  //Конфигурация UART
  UART_InitStructure.UART_BaudRate = 115000; //скорость передачи данных 15000 бод/сек
  UART_InitStructure.UART_WordLength = UART_WordLength8b;//длина слова в посылке = 8бит
  UART_InitStructure.UART_StopBits = UART_StopBits1;//один стоповый бит
  UART_InitStructure.UART_Parity = UART_Parity_No;//без проверки четности
  UART_InitStructure.UART_FIFOMode = UART_FIFO_ON;//включить работу буфера FIFO приемника и передачи
  UART_InitStructure.UART_HardwareFlowControl = UART_HardwareFlowControl_RXE | UART_HardwareFlowControl_TXE;//Разрешить прием, разрешить передачу данных
  //Инициализация UART с заданными параметрами
  UART_Init (MDR_UART1,&amp;UART_InitStructure);
  UART_Cmd(MDR_UART1,ENABLE); //включить сконфигурированный UART
  
  while (1)
  {
    UART_SendData (MDR_UART1, i++); //Послать значение счетчика по UART, и прибавить к нему 1
    delay_ms(5000);//подождать 5 секунд
  }
}</codebox>
    </node>
  </node>
</cherrytree>
